{"uid":"9dceed266f5fb5d5","name":"test_collect_data","fullName":"test_conduit_vizsgaremek.test_conduit.TestConduit#test_collect_data","historyId":"24c8ffb8f727e94588c3752722dd7764","time":{"start":1681601579290,"stop":1681601586316,"duration":7026},"status":"failed","statusMessage":"AssertionError: assert 'lorem, ipsum, dolor, nisil, urna, nunc, laoreet, dorum, loret, nibih, mitast, leo, gyerek, dalok, ' == ['lorem', 'ipsum', 'dolor', 'nisil', 'urna', 'nunc', ...]","statusTrace":"self = <test_conduit.TestConduit object at 0x7fdc7792dd80>\n\n    def test_collect_data(self):\n        loginx(self.browser)\n    \n        # tag adatok listázása és fájlba írása\n        tags_on_page = self.browser.find_elements(By.XPATH, '//div[@class=\"sidebar\"]//div[@class=\"tag-list\"]//a')\n        popular_tags_list = []\n        for tag in tags_on_page:\n            popular_tags_list.append(tag.text)\n        print(popular_tags_list)\n        assert popular_tags_list != 0\n        time.sleep(4)\n    \n        # lista fájlba mentése\n        with open('collected_tag_list.csv', 'w') as csvfile:\n    # with open('test_conduit_vizsgaremek/collected_tag_list.csv', 'w') as csvfile:\n            for row in popular_tags_list:\n                csvfile.write(row+\", \") # a fájlban \"sorban tárolt adatok\"\n                # csvfile.write()\n    \n        # Létrejött fájl tartalmának összevetése a memóriában tárolt listával\n        with open('collected_tag_list.csv', 'r') as saved_content:\n    # with open('test_conduit_vizsgaremek/collected_tag_list.csv', 'w') as saved_content:\n            content = saved_content.read()\n        print(content)\n        print(popular_tags_list)\n>       assert content == popular_tags_list # EZ IGY MEGHAL.\nE       AssertionError: assert 'lorem, ipsum, dolor, nisil, urna, nunc, laoreet, dorum, loret, nibih, mitast, leo, gyerek, dalok, ' == ['lorem', 'ipsum', 'dolor', 'nisil', 'urna', 'nunc', ...]\n\ntest_conduit_vizsgaremek/test_conduit.py:182: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681601578251,"stop":1681601579290,"duration":1039},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'lorem, ipsum, dolor, nisil, urna, nunc, laoreet, dorum, loret, nibih, mitast, leo, gyerek, dalok, ' == ['lorem', 'ipsum', 'dolor', 'nisil', 'urna', 'nunc', ...]","statusTrace":"self = <test_conduit.TestConduit object at 0x7fdc7792dd80>\n\n    def test_collect_data(self):\n        loginx(self.browser)\n    \n        # tag adatok listázása és fájlba írása\n        tags_on_page = self.browser.find_elements(By.XPATH, '//div[@class=\"sidebar\"]//div[@class=\"tag-list\"]//a')\n        popular_tags_list = []\n        for tag in tags_on_page:\n            popular_tags_list.append(tag.text)\n        print(popular_tags_list)\n        assert popular_tags_list != 0\n        time.sleep(4)\n    \n        # lista fájlba mentése\n        with open('collected_tag_list.csv', 'w') as csvfile:\n    # with open('test_conduit_vizsgaremek/collected_tag_list.csv', 'w') as csvfile:\n            for row in popular_tags_list:\n                csvfile.write(row+\", \") # a fájlban \"sorban tárolt adatok\"\n                # csvfile.write()\n    \n        # Létrejött fájl tartalmának összevetése a memóriában tárolt listával\n        with open('collected_tag_list.csv', 'r') as saved_content:\n    # with open('test_conduit_vizsgaremek/collected_tag_list.csv', 'w') as saved_content:\n            content = saved_content.read()\n        print(content)\n        print(popular_tags_list)\n>       assert content == popular_tags_list # EZ IGY MEGHAL.\nE       AssertionError: assert 'lorem, ipsum, dolor, nisil, urna, nunc, laoreet, dorum, loret, nibih, mitast, leo, gyerek, dalok, ' == ['lorem', 'ipsum', 'dolor', 'nisil', 'urna', 'nunc', ...]\n\ntest_conduit_vizsgaremek/test_conduit.py:182: AssertionError","steps":[],"attachments":[{"uid":"4efeb868bf5e4dee","name":"stdout","source":"4efeb868bf5e4dee.txt","type":"text/plain","size":353}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681601586356,"stop":1681601586413,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test_conduit_vizsgaremek"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az674-564"},{"name":"thread","value":"3052-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_conduit_vizsgaremek.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"9dceed266f5fb5d5.json","parameterValues":[]}